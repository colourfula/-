#include<iostream>
using namespace std;

class Data
{
public:
	Data()
	{}

	Data(int year,int mouth,int day)
		:_year(year)
		,_mouth(mouth)
		,_day(day)
	{
		Invalid();
	}

	Data& operator=(const Data& d)
	{
		_year = d._year;
		_mouth = d._mouth;
		_day = d._day;
		return *this;
	}

	bool operator>(const Data& d)
	{
		if ((_year > d._year) || (_year<=d._year && _mouth>d._mouth) || \
			(_year <= d._year && _mouth <= d._mouth && _day > d._day))
			return true;
		else
			return false;
	}


	bool operator<(const Data& d)
	{
		if ((_year < d._year) || (_year>=d._year && _mouth<d._mouth) || \
			(_year >= d._year && _mouth >= d._mouth && _day < d._day))
			return true;
		else
			return false;
	}


	bool operator==(const Data& d)
	{
		if (_year == d._year && _mouth == d._mouth && _day == d._day)
			return true;
		else
			return false;
	}


	bool operator<=(const Data& d)
	{
		return (*this > d || *this == d);
	}

	bool operator>=(const Data& d)
	{
		return (*this < d || *this == d);
	}

	Data operator+(int day)
	{
		if (day < 0)
			return (*this) - day;
		Data ret(*this);
		ret._day = ret._day + day;
		if (ret._day > _Getdays(ret._year, ret._mouth))
		{
			ret._day = ret._day - _Getdays(ret._year, ret._mouth);
			ret._mouth++;
			if (ret._mouth == 13)
			{
				ret._year += 1;
				ret._day = 1;
			}
		}
		return ret;
	}


	Data& operator+=(int day)
	{
		return *this = *this + day;
	}

	
	Data operator-(int day)
	{
		if (day < 0)
			return (*this) + (-day);
		Data ret(*this);
		int themouthdays = _Getdays(ret._year, ret._mouth);
		ret._day = ret._day - day;
			if (ret._day < 0)
		{
				ret._mouth--;
				if (ret._mouth == 0)
				{
					ret._mouth = 12;
					ret._year--;
					 
				}
				ret._day =  themouthdays - (-ret._day);
		}
			return ret;
	}


	Data& operator-=(int day)
	{
		return *this = *this - day;
	}


	Data& operator++()//前置++,++i
	{
		*this += 1;
		return *this;
	}

	Data& operator++(int)//后置++,i++
	{
		Data ret(*this);
		*this += 1;
		return ret;
	}

	Data& operator--()//前置--,--i
	{
		*this -= 1;
		return *this;
	}

	Data& operator--(int)//后置--,i--
	{
		Data ret(*this);
		*this -= 1;
		return ret;
	}

	void Show(Data data)
	{
		cout << data._year <<".";
		cout << data._mouth<<"." ;
		cout << data._day << endl;
	}
private:
	bool Invalid()
	{
		if (_year > 0 && _year && _mouth > 0 && _mouth<12\
			&& _day>0 && _day < _Getdays(_year,_mouth))
			return true;
		else
			return false;
	}


	int _Getdays(int year, int mouth)
	{
		int Mouth[13] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
		if (mouth != 2)
		{
			return Mouth[mouth];
		}
		else
		{
			if (_IsLeapYear(year))
				return Mouth[mouth];
			else
				return Mouth[mouth] + 1;
		}

	}

	bool _IsLeapYear(int year)
	{
		if ((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0))
			return true;
		else
			return false;
	}

private:
	int _year;
	int _mouth;
};

void TestData()
{
	Data d1;
	Data d2(1997, 1, 6);
	d1 = d2;
	Data d3(1997, 1, 7);
	if (d3 > d2)
		cout << "d3 > d2" << endl;
	else
		cout << "error" << endl;

	Data d4 = d3 + 3;
	//cout << d4.Show(d4) << endl;
 
	d4 = d4 - 11;

	Data d5 = ++d4;
	Data d6 = d4++;
}
