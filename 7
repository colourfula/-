 //#include<iostream>
//#include<queue>
//using namespace std;
//
////输入一个整数数组，实现一个函数，来调整该数
////组中数字的顺序使得数组中所有的奇数位于数组的前半部分，所有偶数位于数组的后半部分。
//
//void swap(int *a, int *b)
//{
//	int temp = 0;
//	temp = *a;
//	*a = *b;
//	*b = temp;
//}
//
////快排的思想，时间复杂度最优,改变了数据的相对位置
//void func(int array[],int len)
//{
//	int* start = &array[0];
//	int* end = &array[len-1];
//
//	while (end > start)
//	{
//		while(*start % 2 == 1)
//			start++;
//		while(*end % 2 == 0)
//			end--;
//		if (end > start)
//		{
//			swap(start, end);
//		}
//	}
//}
//
////冒泡的思想，时间复杂度最差，改变了数据的相对位置
//void func2(int array[], int len)
//{
//	for (int i = 0; i < len; i++)
//	{
//		for (int j = 0; j < len - i-1; j++)
//		{
//			if ((array[j]% 2 == 0) && (array[j + 1] % 2 == 1))
//				swap(array[j], array[j + 1]);
//		}
//	}
//}
//
//
////将偶数拿出来存到队列中，将奇数挨个往前放。时间复杂度居中O（n）
////不改变数据的相对位置
//void func3(int array[], int len)
//{
//	queue<int> q;
//	int count = 0;
//	for (int i = 0; i < len; i++)
//	{
//		if (array[i] % 2 == 0)//偶数
//		{
//			count++;
//			q.push(array[i]);
//		}
//		else
//		{
//			array[i-count] = array[i];
//		}
//	}
//
//	for (int i = len-count; i < len; i++)
//	{
//		array[i] = q.front();		
//		q.pop();
//	}
//}
//void Testfunc()
//{
//	int array[] = { 11,44,66,7,4,8,33 };
//	int len = sizeof(array) / sizeof(array[0]);
//	func(array,len);
//	func2(array, len);
//	func3(array, len);
//	for (int i = 0; i < len; i++)
//		printf("%d ", array[i]);
//	printf("\n");
//}





#include<iostream>
using namespace std;


string& func(string s)
{
	string s1;
	int oldlen = s.size();
	for (int i = 0; i < oldlen; i++)
	{
		if (s[i] == '\0')
		{
			s1 = s1 + "%20";
		}
		else
		{
			s1.push_back(s[i]);
		}
	}
	return s1;
}


void Testfunc()
{
	string s = "we are happy";
	string s1 = func(s);
	printf("%s\n", s1);

}










#include<iostream>
using namespace std;

class CWashRoom
{
public:
	void GoToManWashRoom()
	{
		cout<<"Man------------>Please Left" << endl;
	}
	void GoToWomanRoom()
	{
		cout<<"Woman------------>Please Right" << endl;
	}
};


class CPerson
{
public:
	virtual void GoToWashRoom(CWashRoom &_washroom) = 0;
};

class CMan :public CPerson
{
public:
	virtual void GoToWashRoom(CWashRoom &_washroom)
	{
		_washroom.GoToManWashRoom();
	}
};


class CWoman :public CPerson
{
public:
	virtual void GoToWashRoom(CWashRoom &_washroom)
	{
		_washroom.GoToWomanRoom();
	}
};

void TestVirtual()
{
	CWashRoom CWashRoom;
	for (int i = 1; i < 11; i++)
	{
		CPerson* CPerson;
		int iPerson = rand() % i;
		if (iPerson & 0x01)
		{
			CPerson = new CMan;
		}
		else
		{
			CPerson = new CWoman;
		}

		CPerson->GoToWashRoom(CWashRoom);
		delete CPerson;
		CPerson = NULL;
	}
}



